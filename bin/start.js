process.env.BABEL_ENV = 'development';
process.env.NODE_ENV = 'development';

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on('unhandledRejection', err => {
  throw err;
});

const chalk = require('chalk');
const webpack = require('webpack');
const WebpackDevServer = require('webpack-dev-server');
const clearConsole = require('react-dev-utils/clearConsole');
const { choosePort } = require('react-dev-utils/WebpackDevServerUtils');
const formatWebpackMessages = require('react-dev-utils/formatWebpackMessages');
const project = require('../config/project');
const config = require('../config/webpack.config.dev');
const createDevServerConfig = require('../config/webpack_dev_server.config');
const isInteractive = true;

const DEFAULT_PORT = project.server_port;
const HOST = project.server_host;

const devEntries = [];

Object.keys(config.entry).forEach(name => {
  config.entry[name] = devEntries.concat(config.entry[name]);
});
let _port;
let _serverConfig;

choosePort(HOST, DEFAULT_PORT)
  .then(port => {
    if (port == null) {
      return;
    }
    _port = port;
    // Create a webpack compiler that is configured with custom messages.
    const compiler = createCompiler(config);
    // Serve webpack assets generated by the compiler over a web sever.
    _serverConfig = createDevServerConfig();
    const devServer = new WebpackDevServer(compiler, _serverConfig);
    // Launch WebpackDevServer.
    devServer.listen(port, HOST, err => {
      if (err) {
        return console.log(err);
      }
      if (isInteractive) {
        clearConsole();
      }
      console.log(chalk.cyan('Starting the development server...\n'));
    });

    ['SIGINT', 'SIGTERM'].forEach(sig => {
      process.on(sig, () => {
        devServer.close();
        process.exit();
      });
    });
  })
  .catch(err => {
    if (err && err.message) {
      console.log(err.message);
    }
    process.exit(1);
  });

function createCompiler(config) {
  let compiler;
  let startTime;
  try {
    compiler = webpack(config);
  } catch (err) {
    console.log(chalk.red('Failed to compile.'));
    console.log();
    console.log(err.message || err);
    console.log();
    process.exit(1);
  }

  compiler.plugin('invalid', () => {
    if (isInteractive) {
      clearConsole();
    }
    startTime = Date.now();
    console.log('Compiling...');
  });

  let isFirstCompile = true;

  compiler.plugin('done', stats => {
    // We have switched off the default Webpack output in WebpackDevServer
    // options so we are going to "massage" the warnings and errors and present
    // them in a readable focused way.
    const messages = formatWebpackMessages(stats.toJson({}, true));
    const isSuccessful = !messages.errors.length && !messages.warnings.length;
    if (isSuccessful) {
      let compiledSuccess = 'Compiled successfully';
      if (startTime) {
        compiledSuccess += ', cost ' + (Date.now() - startTime) + 'ms.';
      }
      console.log(chalk.green(compiledSuccess));
    }
    if (isSuccessful && (isInteractive || isFirstCompile)) {
      console.log();
      console.log('You can now view app in the browser.');
      const url = `http://${HOST}:${_port}`;
      global.entryUrl = url;
      console.log(chalk.green('> Listening at ' + url + '\n'));
    }
    isFirstCompile = false;

    // If errors exist, only show errors.
    if (messages.errors.length) {
      // Only keep the first error. Others are often indicative
      // of the same problem, but confuse the reader with noise.
      if (messages.errors.length > 1) {
        messages.errors.length = 1;
      }
      console.log(chalk.red('Failed to compile.\n'));
      console.log(messages.errors.join('\n\n'));
      return;
    }

    // Show warnings if no errors were found.
    if (messages.warnings.length) {
      console.log(chalk.yellow('Compiled with warnings.\n'));
      console.log(messages.warnings.join('\n\n'));

      // Teach some ESLint tricks.
      console.log(
        '\nSearch for the ' +
            chalk.underline(chalk.yellow('keywords')) +
            ' to learn more about each warning.'
      );
      console.log(
        'To ignore, add ' +
            chalk.cyan('// eslint-disable-next-line') +
            ' to the line before.\n'
      );
    }
  });
  return compiler;
}
